import requests

from venv import logger

from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import models
from django.utils import timezone


# Must be to connect to img models these functions!
def image_upload_path(instance, filename):
    if instance is not TripPhoto:
        raise ValueError("this func works only with instance TripPhoto")

    if instance.type not in dict(instance.PHOTO_TYPE_CHOICES).keys():
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: {instance.type}")

    return f"media/trip_{instance.trip.id}/{instance.type}/{timezone.now().strftime('%Y%m%d%H%M%S')}_{filename}"


class Trip(models.Model):
    COUNTRY_CHOICES = [
        ('cz', '–ß–µ—Ö–∏—è'),
        ('it', '–ò—Ç–∞–ª–∏—è'),
        ('is', '–ò—Å–ª–∞–Ω–¥–∏—è'),
        ('eg', '–ï–≥–∏–ø–µ—Ç'),
        ('pt', '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è'),
        ('es', '–ò—Å–ø–∞–Ω–∏—è'),
        ('jo', '–ò–æ—Ä–¥–∞–Ω–∏—è'),
        ('fr', '–§—Ä–∞–Ω—Ü–∏—è'),
        ('nl', '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã'),
        ('no', '–ù–æ—Ä–≤–µ–≥–∏—è'),
    ]

    title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞", max_length=255)
    country = models.CharField("–°—Ç—Ä–∞–Ω–∞", max_length=2, choices=COUNTRY_CHOICES)
    welcome_message = models.CharField("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", max_length=255)
    duration_days = models.PositiveIntegerField("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–µ–π)")
    accommodation = models.TextField("–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ")
    group_size = models.PositiveIntegerField("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã")
    leaders = models.CharField("–ö–æ–º–∞–Ω–¥–∞", max_length=255)
    bonus = models.CharField("–ü–æ–¥–∞—Ä–∫–∏", max_length=255, blank=True)
    seo_title = models.CharField(max_length=60, blank=True)
    seo_description = models.TextField(blank=True)

    def __str__(self):
        return self.title


class TripPhoto(models.Model):
    PHOTO_TYPE_CHOICES = [
        ('main', '–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ(1)'),
        ('gallery', '–§–æ—Ç–æ –≥–∞–ª–µ—Ä–µ–∏(5)'),
        ('slide', '–§–æ—Ç–æ —Å —Ç—É—Ä–∞(n)'),
    ]

    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='photos')
    photo = models.ImageField(upload_to=image_upload_path)
    type = models.CharField(max_length=7, choices=PHOTO_TYPE_CHOICES)
    caption = models.CharField("–ü–æ–¥–ø–∏—Å—å", max_length=100, blank=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['trip', 'type'],
                condition=models.Q(type='main'),
                name='unique_main_photo'
            )
        ]


class ProgramByDay(models.Model):
    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='days')
    day_number = models.PositiveIntegerField("–î–µ–Ω—å", default=1)
    title = models.CharField("–ú–µ—Å—Ç–æ", max_length=60)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è")
    accommodation = models.TextField("–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", blank=True)
    meal_plan = models.CharField("–ü–∏—Ç–∞–Ω–∏–µ", max_length=100, blank=True)

    class Meta:
        ordering = ['day_number']
        verbose_name = "–î–µ–Ω—å —Ç—É—Ä–∞"
        verbose_name_plural = "–î–Ω–∏ —Ç—É—Ä–∞"


class IncludedFeature(models.Model):
    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='included_features')
    title = models.CharField("–ü—É–Ω–∫—Ç", max_length=60)
    description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ", max_length=200)
    icon = models.CharField("–ò–∫–æ–Ω–∫–∞ (FontAwesome)", max_length=30, blank=True)

    class Meta:
        ordering = ['id']


class TripDate(models.Model):
    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='trip_dates')
    start_date = models.DateField("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    end_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    price = models.DecimalField("–¶–µ–Ω–∞", max_digits=10, decimal_places=0)
    current_members = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏")
    is_special_offer = models.BooleanField("–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", default=False)
    icon = models.CharField("–ò–∫–æ–Ω–∫–∞ –æ—Ñ–µ—Ä–∞ (FontAwesome)", max_length=30, blank=True)

    def clean(self):
        if self.start_date >= self.end_date:
            raise ValidationError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")

    @property
    def available_spots(self):
        return self.trip.group_size - self.current_members

    def __str__(self):
        return f"{self.start_date} - {self.end_date} ({self.price}‚Ç¨)"


class TripRequest(models.Model):
    CONTACT_METHODS = [
        ('tg', 'Telegram'),
        ('wa', 'WhatsApp'),
        ('call', '–ó–≤–æ–Ω–æ–∫'),
    ]

    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='requests')
    name = models.CharField("–ò–º—è", max_length=100)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20)
    email = models.EmailField("Email", blank=True)
    preferred_contact = models.CharField("–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏", max_length=4, choices=CONTACT_METHODS)
    notes = models.TextField("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    is_spam = models.BooleanField(default=False)

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        recent_requests = TripRequest.objects.filter(
            phone=self.phone,
            created_at__gte=timezone.now() - timezone.timedelta(hours=1)
        ).count()

        if recent_requests >= 3:
            raise ValidationError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        spam_keywords = ['http', 'www', '–∫—É–ø–ª—é', '–ø—Ä–æ–¥–∞–º']
        if any(keyword in self.notes.lower() for keyword in spam_keywords):
            self.is_spam = True

    def send_telegram_notification(self):
        message = (
            f"üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
            f"–¢—É—Ä: {self.trip.title}\n"
            f"–ò–º—è: {self.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
            f"–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {self.get_preferred_contact_display()}"
        )

        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": settings.TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }

        try:
            requests.post(url, json=payload, timeout=5)
        except Exception as e:
            logger.error(f"Telegram notification failed: {str(e)}")

    def save(self, *args, **kwargs):
        is_new = self._state.adding
        super().save(*args, **kwargs)
        if is_new and not self.is_spam:
            self.send_telegram_notification()


class FAQ(models.Model):
    trip = models.ForeignKey(Trip, on_delete=models.CASCADE, related_name='faqs')
    question = models.CharField("–í–æ–ø—Ä–æ—Å", max_length=255)
    answer = models.TextField("–û—Ç–≤–µ—Ç")
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫", default=0)

    class Meta:
        ordering = ['order']
